{"version":3,"sources":["components/Card.js","components/ErrorBoudry.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","src","width","height","alt","ErrorBoundry","state","hasError","error","info","this","setState","children","Component","CardList","robots","cardComponent","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","App","onSearchChanged","event","searchField","target","value","fetch","then","response","json","users","filterBot","filter","robot","toLowerCase","includes","length","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sNAgBeA,EAdF,SAACC,GAAU,IACbC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,GACpB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BF,GAAiEG,MAAM,QAAQC,OAAO,QAAQC,IAAI,aACpI,6BACI,4BAAKP,GACL,2BAAIC,MCcLO,E,YApBX,WAAYT,GAAQ,IAAD,8BACf,4CAAMA,KACDU,MAAQ,CACTC,UAAU,GAHC,E,+EAODC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAK1B,OAAIG,KAAKJ,MAAMC,SACJ,+CAEJG,KAAKd,MAAMgB,a,GAjBCC,aCkBZC,EAhBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAIVC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACpC,OACI,kBAAC,EAAD,CAAMC,IAAKD,EAAGpB,GAAIgB,EAAOI,GAAGpB,GAAIF,KAAMkB,EAAOI,GAAGtB,KAAMC,MAAOiB,EAAOI,GAAGrB,WAG/E,OACI,6BACKkB,ICLEK,EARG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKtB,UAAU,OACX,2BAAOA,UAAU,mCAAmCuB,KAAK,SAASC,YAAY,aAAaC,SAAUH,MCKlGI,EARA,SAAC9B,GACZ,OACI,yBAAK+B,MAAO,CAAEC,UAAW,SAAUzB,OAAQ,UACtCP,EAAMgB,WC8CJiB,E,YA3CX,aAAe,IAAD,8BACV,+CAeJC,gBAAkB,SAACC,GACf,EAAKpB,SAAS,CAACqB,YAAaD,EAAME,OAAOC,SAfzC,EAAK5B,MAAQ,CACTS,OAAQ,GACRiB,YAAa,IAJP,E,iFAQO,IAAD,OAChBG,MAAM,8CAA8CC,MAAK,SAAAC,GACrD,OAAOA,EAASC,UACjBF,MAAK,SAAAG,GACJ,EAAK5B,SAAS,CAAEI,OAAQwB,S,+BAStB,IAAD,OACCC,EAAY9B,KAAKJ,MAAMS,OAAO0B,QAAO,SAACC,GACxC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAAS,EAAKtC,MAAM0B,YAAYW,kBAEpE,OAAiC,IAA7BjC,KAAKJ,MAAMS,OAAO8B,OACX,0CAGH,yBAAK7C,UAAU,MACX,wBAAIA,UAAU,OAAd,eACA,kBAAC,EAAD,CAAWsB,aAAcZ,KAAKoB,kBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUf,OAAQyB,W,GAnC5BM,IAAMjC,WCKJkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDyH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.c13d53cb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = (props) => { // props are the props that are sent from CardList.js\r\n    const {name, email, id} = props // this is destructuring props into its components. the names must match up with prop's names you can also destructure props right inside the brackets you just put the elements you want to destructure: {name, email, id}    return( // this can only return one thing (wrap everything in a div)\r\n    return(\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\"> \r\n            <img src={`https://robohash.org/${id}` /* this is an embeded string allowing for interior code */} width=\"200px\" height=\"200px\" alt=\"No Image\" />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email /* any javascript expression in jsx must have these curly brackets */}</p>\r\n            </div>\r\n        </div>\r\n    ); // the above is called jsx\r\n}\r\n// note - you can't use class in jsx use className\r\n\r\nexport default Card;","import React, { Component } from \"react\"; // destructuring. it imports React and Component from react\r\n\r\nclass ErrorBoundry extends Component { // instead of making a new class it just extends Component to include the class\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) { // this paremeters represent what the error is and the info about it\r\n        this.setState({ hasError: true });\r\n    }\r\n    // the function above only runs when it catches an error\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Ooops. No Good.</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport ErrorBoundry from \"./ErrorBoudry\";\r\n\r\nconst CardList = ({ robots }) => {\r\n    // if (true) {\r\n    //     throw new Error(\"OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOf\");\r\n    // }\r\n    const cardComponent = robots.map((user, i) => { // key is something that has to be used so the virtual dom can identify each object\r\n        return(\r\n            <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n        );\r\n    });\r\n    return(\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from \"react\";\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return(\r\n        <div className=\"pa2\">\r\n            <input className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"search box\" onChange={searchChange} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from \"react\";\r\n\r\nconst Scroll = (props) => { // we are not passsing in any props but we are getting the children of Scroll through props\r\n    return ( // the double braces returns an object that can hold styles, it is also using jsx so css things are modified\r\n        <div style={{ overflowY: \"scroll\", height: \"500px\" }}> \r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import CardList from \"../components/CardList\";\r\n// import {robots} from \"./robots\"; <-- (not in use) this is an example of destructuring, we didn't use default to export so we may have more than one export to grab\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport React from \"react\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundry from \"../components/ErrorBoudry\";\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = { // the state is known as something that can change and that describes our app (the name can still be anything)\r\n            robots: [], // something with state is called a smart component\r\n            searchField: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() { // react components do not require arrow functions\r\n        fetch(\"https://jsonplaceholder.typicode.com/users\").then(response => {\r\n            return response.json();\r\n        }).then(users => {\r\n            this.setState({ robots: users })\r\n        });\r\n    }\r\n\r\n    onSearchChanged = (event) => { // use this syntax (on current line) so that \"this\" will refer to the obj it is in and not whereever it is being called from\r\n        this.setState({searchField: event.target.value}) // state must be called state in takes no other name (setState)\r\n    }\r\n\r\n\r\n    render() {\r\n        const filterBot = this.state.robots.filter((robot) => {\r\n            return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n        })\r\n        if (this.state.robots.length === 0){\r\n            return <h1>Loading...</h1>\r\n        } else {\r\n            return(\r\n                <div className=\"tc\">\r\n                    <h1 className=\"pa2\">RoboFriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChanged} />\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filterBot} />\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            ); // the slash after CardList is just standard syntax for a self closing tag in js\r\n        } \r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom'; // import - imports things that will be used for anything index.js is included in\nimport './index.css';\nimport App from \"./containers/App\"; // if there is no file type specified, it will be assumed as javascript\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\"; // little nodes of code (like bootstrap) only it's for css\n\n\nReactDOM.render(<App /> , document.getElementById('root'));\n// robot is a prop, it can be named litterally anything and set to any data type go to CardList.js to see what it does\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}